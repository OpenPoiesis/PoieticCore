{
  "abstract" : [
    {
      "text" : "Formulas are arithmetic expressions that can be used for computation.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/PoieticCore\/documentation\/PoieticCore"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/PoieticCore\/documentation\/PoieticCore\/Formulas"
  },
  "kind" : "article",
  "metadata" : {
    "modules" : [
      {
        "name" : "PoieticCore"
      }
    ],
    "role" : "collectionGroup",
    "roleHeading" : "API Collection",
    "title" : "Formulas"
  },
  "primaryContentSections" : [
    {
      "content" : [
        {
          "anchor" : "Overview",
          "level" : 2,
          "text" : "Overview",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "The library provides a way to parse and express arithmetic expressions as",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "structures that can be further transformed or directly used for computation.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let parser = ExpressionParser(string: \"a + (b * 10))\")",
            "let expression: UnboundExpression = try parser.parse()"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Binary arithmetic operators:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "header" : "row",
          "rows" : [
            [
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Operator",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Description",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "+",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Addition",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "-",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Subtraction",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "*",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Multiplication",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "\/",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Division",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "%",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Remainder after division",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ]
          ],
          "type" : "table"
        },
        {
          "inlineContent" : [
            {
              "text" : "Comparison operators:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "header" : "row",
          "rows" : [
            [
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Operator",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Description",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "==",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Equal",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "!=",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Not equal",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "code" : ">",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Greater than",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "code" : ">=",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Greater or equal than",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "<",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Less than",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "<=",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Less or equal than",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ]
          ],
          "type" : "table"
        },
        {
          "inlineContent" : [
            {
              "text" : "Built-in logical functions:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "header" : "row",
          "rows" : [
            [
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Name",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Description",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "if(cond,tval,fval)",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Returns ",
                      "type" : "text"
                    },
                    {
                      "inlineContent" : [
                        {
                          "text" : "tval",
                          "type" : "text"
                        }
                      ],
                      "type" : "emphasis"
                    },
                    {
                      "text" : " if the condition ",
                      "type" : "text"
                    },
                    {
                      "inlineContent" : [
                        {
                          "text" : "cond",
                          "type" : "text"
                        }
                      ],
                      "type" : "emphasis"
                    },
                    {
                      "text" : " is true, otherwise ",
                      "type" : "text"
                    },
                    {
                      "inlineContent" : [
                        {
                          "text" : "fval",
                          "type" : "text"
                        }
                      ],
                      "type" : "emphasis"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "not(a)",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Returns negation of boolean value ",
                      "type" : "text"
                    },
                    {
                      "inlineContent" : [
                        {
                          "text" : "a",
                          "type" : "text"
                        }
                      ],
                      "type" : "emphasis"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "or(a,b,...)",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Returns logical ",
                      "type" : "text"
                    },
                    {
                      "inlineContent" : [
                        {
                          "text" : "OR",
                          "type" : "text"
                        }
                      ],
                      "type" : "emphasis"
                    },
                    {
                      "text" : " of all the arguments – true if at least one is true",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "and(a,b,...)",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Returns logical ",
                      "type" : "text"
                    },
                    {
                      "inlineContent" : [
                        {
                          "text" : "AND",
                          "type" : "text"
                        }
                      ],
                      "type" : "emphasis"
                    },
                    {
                      "text" : " of all the arguments – true if all arguments are true",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ]
          ],
          "type" : "table"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ],
  "seeAlsoSections" : [
    {
      "anchor" : "Others",
      "generated" : true,
      "identifiers" : [
        "doc:\/\/PoieticCore\/documentation\/PoieticCore\/Graphs",
        "doc:\/\/PoieticCore\/documentation\/PoieticCore\/Runtime"
      ],
      "title" : "Others"
    }
  ],
  "topicSections" : [
    {
      "anchor" : "Arithmetic-Expression",
      "identifiers" : [
        "doc:\/\/PoieticCore\/documentation\/PoieticCore\/ArithmeticExpression",
        "doc:\/\/PoieticCore\/documentation\/PoieticCore\/UnboundExpression"
      ],
      "title" : "Arithmetic Expression"
    },
    {
      "anchor" : "Functions",
      "identifiers" : [
        "doc:\/\/PoieticCore\/documentation\/PoieticCore\/Function",
        "doc:\/\/PoieticCore\/documentation\/PoieticCore\/Signature",
        "doc:\/\/PoieticCore\/documentation\/PoieticCore\/FunctionArgument",
        "doc:\/\/PoieticCore\/documentation\/PoieticCore\/BuiltinComparisonOperators",
        "doc:\/\/PoieticCore\/documentation\/PoieticCore\/BuiltinFunctions"
      ],
      "title" : "Functions"
    },
    {
      "anchor" : "Parsing",
      "identifiers" : [
        "doc:\/\/PoieticCore\/documentation\/PoieticCore\/ExpressionParser",
        "doc:\/\/PoieticCore\/documentation\/PoieticCore\/TextLocation",
        "doc:\/\/PoieticCore\/documentation\/PoieticCore\/Token",
        "doc:\/\/PoieticCore\/documentation\/PoieticCore\/Lexer",
        "doc:\/\/PoieticCore\/documentation\/PoieticCore\/Scanner",
        "doc:\/\/PoieticCore\/documentation\/PoieticCore\/ExpressionLexer",
        "doc:\/\/PoieticCore\/documentation\/PoieticCore\/ExpressionTokenType",
        "doc:\/\/PoieticCore\/documentation\/PoieticCore\/TokenTypeProtocol",
        "doc:\/\/PoieticCore\/documentation\/PoieticCore\/ExpressionSyntaxError",
        "doc:\/\/PoieticCore\/documentation\/PoieticCore\/ScannerError"
      ],
      "title" : "Parsing"
    },
    {
      "anchor" : "Abstract-Syntax-Tree",
      "identifiers" : [
        "doc:\/\/PoieticCore\/documentation\/PoieticCore\/ExpressionSyntax",
        "doc:\/\/PoieticCore\/documentation\/PoieticCore\/ParenthesisSyntax",
        "doc:\/\/PoieticCore\/documentation\/PoieticCore\/UnaryOperatorSyntax",
        "doc:\/\/PoieticCore\/documentation\/PoieticCore\/BinaryOperatorSyntax",
        "doc:\/\/PoieticCore\/documentation\/PoieticCore\/VariableSyntax",
        "doc:\/\/PoieticCore\/documentation\/PoieticCore\/LiteralSyntax",
        "doc:\/\/PoieticCore\/documentation\/PoieticCore\/FunctionCallSyntax",
        "doc:\/\/PoieticCore\/documentation\/PoieticCore\/FunctionArgumentSyntax",
        "doc:\/\/PoieticCore\/documentation\/PoieticCore\/FunctionArgumentListSyntax"
      ],
      "title" : "Abstract Syntax Tree"
    }
  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/poieticcore\/formulas"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://PoieticCore/documentation/PoieticCore": {
  "abstract" : [
    {
      "text" : "Core library for creating applications for systems thinking and simulation.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/PoieticCore\/documentation\/PoieticCore",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "PoieticCore",
  "type" : "topic",
  "url" : "\/documentation\/poieticcore"
},
"doc://PoieticCore/documentation/PoieticCore/ArithmeticExpression": {
  "abstract" : [
    {
      "text" : "Arithmetic expression.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "enum"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "ArithmeticExpression"
    }
  ],
  "identifier" : "doc:\/\/PoieticCore\/documentation\/PoieticCore\/ArithmeticExpression",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "ArithmeticExpression"
    }
  ],
  "role" : "symbol",
  "title" : "ArithmeticExpression",
  "type" : "topic",
  "url" : "\/documentation\/poieticcore\/arithmeticexpression"
},
"doc://PoieticCore/documentation/PoieticCore/BinaryOperatorSyntax": {
  "abstract" : [

  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "BinaryOperatorSyntax"
    }
  ],
  "identifier" : "doc:\/\/PoieticCore\/documentation\/PoieticCore\/BinaryOperatorSyntax",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "BinaryOperatorSyntax"
    }
  ],
  "role" : "symbol",
  "title" : "BinaryOperatorSyntax",
  "type" : "topic",
  "url" : "\/documentation\/poieticcore\/binaryoperatorsyntax"
},
"doc://PoieticCore/documentation/PoieticCore/BuiltinComparisonOperators": {
  "abstract" : [
    {
      "text" : "List of built-in binary comparison operators.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "let"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "BuiltinComparisonOperators"
    },
    {
      "kind" : "text",
      "text" : ": ["
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:11PoieticCore8FunctionC",
      "text" : "Function"
    },
    {
      "kind" : "text",
      "text" : "]"
    }
  ],
  "identifier" : "doc:\/\/PoieticCore\/documentation\/PoieticCore\/BuiltinComparisonOperators",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "BuiltinComparisonOperators",
  "type" : "topic",
  "url" : "\/documentation\/poieticcore\/builtincomparisonoperators"
},
"doc://PoieticCore/documentation/PoieticCore/BuiltinFunctions": {
  "abstract" : [
    {
      "text" : "List of all builtin functions provided by the Core.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "let"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "BuiltinFunctions"
    },
    {
      "kind" : "text",
      "text" : ": ["
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:11PoieticCore8FunctionC",
      "text" : "Function"
    },
    {
      "kind" : "text",
      "text" : "]"
    }
  ],
  "identifier" : "doc:\/\/PoieticCore\/documentation\/PoieticCore\/BuiltinFunctions",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "BuiltinFunctions",
  "type" : "topic",
  "url" : "\/documentation\/poieticcore\/builtinfunctions"
},
"doc://PoieticCore/documentation/PoieticCore/ExpressionLexer": {
  "abstract" : [
    {
      "text" : "An object for lexical analysis of an arithmetic expression.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "ExpressionLexer"
    }
  ],
  "identifier" : "doc:\/\/PoieticCore\/documentation\/PoieticCore\/ExpressionLexer",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "ExpressionLexer"
    }
  ],
  "role" : "symbol",
  "title" : "ExpressionLexer",
  "type" : "topic",
  "url" : "\/documentation\/poieticcore\/expressionlexer"
},
"doc://PoieticCore/documentation/PoieticCore/ExpressionParser": {
  "abstract" : [
    {
      "text" : "Parser for arithmetic expressions.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "ExpressionParser"
    }
  ],
  "identifier" : "doc:\/\/PoieticCore\/documentation\/PoieticCore\/ExpressionParser",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "ExpressionParser"
    }
  ],
  "role" : "symbol",
  "title" : "ExpressionParser",
  "type" : "topic",
  "url" : "\/documentation\/poieticcore\/expressionparser"
},
"doc://PoieticCore/documentation/PoieticCore/ExpressionSyntax": {
  "abstract" : [
    {
      "text" : "Protocol for expression syntax nodes.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "protocol"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "ExpressionSyntax"
    }
  ],
  "identifier" : "doc:\/\/PoieticCore\/documentation\/PoieticCore\/ExpressionSyntax",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "ExpressionSyntax"
    }
  ],
  "role" : "symbol",
  "title" : "ExpressionSyntax",
  "type" : "topic",
  "url" : "\/documentation\/poieticcore\/expressionsyntax"
},
"doc://PoieticCore/documentation/PoieticCore/ExpressionSyntaxError": {
  "abstract" : [
    {
      "text" : "Error thrown by the expression language parser.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "enum"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "ExpressionSyntaxError"
    }
  ],
  "identifier" : "doc:\/\/PoieticCore\/documentation\/PoieticCore\/ExpressionSyntaxError",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "ExpressionSyntaxError"
    }
  ],
  "role" : "symbol",
  "title" : "ExpressionSyntaxError",
  "type" : "topic",
  "url" : "\/documentation\/poieticcore\/expressionsyntaxerror"
},
"doc://PoieticCore/documentation/PoieticCore/ExpressionTokenType": {
  "abstract" : [

  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "enum"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "ExpressionTokenType"
    }
  ],
  "identifier" : "doc:\/\/PoieticCore\/documentation\/PoieticCore\/ExpressionTokenType",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "ExpressionTokenType"
    }
  ],
  "role" : "symbol",
  "title" : "ExpressionTokenType",
  "type" : "topic",
  "url" : "\/documentation\/poieticcore\/expressiontokentype"
},
"doc://PoieticCore/documentation/PoieticCore/Function": {
  "abstract" : [
    {
      "text" : "Class representing a function used in arithmetic expression evaluation.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "Function"
    }
  ],
  "identifier" : "doc:\/\/PoieticCore\/documentation\/PoieticCore\/Function",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "Function"
    }
  ],
  "role" : "symbol",
  "title" : "Function",
  "type" : "topic",
  "url" : "\/documentation\/poieticcore\/function"
},
"doc://PoieticCore/documentation/PoieticCore/FunctionArgument": {
  "abstract" : [
    {
      "text" : "Object representing a function argument description.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "FunctionArgument"
    }
  ],
  "identifier" : "doc:\/\/PoieticCore\/documentation\/PoieticCore\/FunctionArgument",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "FunctionArgument"
    }
  ],
  "role" : "symbol",
  "title" : "FunctionArgument",
  "type" : "topic",
  "url" : "\/documentation\/poieticcore\/functionargument"
},
"doc://PoieticCore/documentation/PoieticCore/FunctionArgumentListSyntax": {
  "abstract" : [

  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "FunctionArgumentListSyntax"
    }
  ],
  "identifier" : "doc:\/\/PoieticCore\/documentation\/PoieticCore\/FunctionArgumentListSyntax",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "FunctionArgumentListSyntax"
    }
  ],
  "role" : "symbol",
  "title" : "FunctionArgumentListSyntax",
  "type" : "topic",
  "url" : "\/documentation\/poieticcore\/functionargumentlistsyntax"
},
"doc://PoieticCore/documentation/PoieticCore/FunctionArgumentSyntax": {
  "abstract" : [

  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "FunctionArgumentSyntax"
    }
  ],
  "identifier" : "doc:\/\/PoieticCore\/documentation\/PoieticCore\/FunctionArgumentSyntax",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "FunctionArgumentSyntax"
    }
  ],
  "role" : "symbol",
  "title" : "FunctionArgumentSyntax",
  "type" : "topic",
  "url" : "\/documentation\/poieticcore\/functionargumentsyntax"
},
"doc://PoieticCore/documentation/PoieticCore/FunctionCallSyntax": {
  "abstract" : [

  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "FunctionCallSyntax"
    }
  ],
  "identifier" : "doc:\/\/PoieticCore\/documentation\/PoieticCore\/FunctionCallSyntax",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "FunctionCallSyntax"
    }
  ],
  "role" : "symbol",
  "title" : "FunctionCallSyntax",
  "type" : "topic",
  "url" : "\/documentation\/poieticcore\/functioncallsyntax"
},
"doc://PoieticCore/documentation/PoieticCore/Graphs": {
  "abstract" : [
    {
      "text" : "Graphs are views that comprise of nodes and edges – connections between nodes.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/PoieticCore\/documentation\/PoieticCore\/Graphs",
  "kind" : "article",
  "role" : "collectionGroup",
  "title" : "Graph",
  "type" : "topic",
  "url" : "\/documentation\/poieticcore\/graphs"
},
"doc://PoieticCore/documentation/PoieticCore/Lexer": {
  "abstract" : [
    {
      "text" : "Protocol for syntax lexers.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "protocol"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "Lexer"
    }
  ],
  "identifier" : "doc:\/\/PoieticCore\/documentation\/PoieticCore\/Lexer",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "Lexer"
    }
  ],
  "role" : "symbol",
  "title" : "Lexer",
  "type" : "topic",
  "url" : "\/documentation\/poieticcore\/lexer"
},
"doc://PoieticCore/documentation/PoieticCore/LiteralSyntax": {
  "abstract" : [

  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "LiteralSyntax"
    }
  ],
  "identifier" : "doc:\/\/PoieticCore\/documentation\/PoieticCore\/LiteralSyntax",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "LiteralSyntax"
    }
  ],
  "role" : "symbol",
  "title" : "LiteralSyntax",
  "type" : "topic",
  "url" : "\/documentation\/poieticcore\/literalsyntax"
},
"doc://PoieticCore/documentation/PoieticCore/ParenthesisSyntax": {
  "abstract" : [

  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "ParenthesisSyntax"
    }
  ],
  "identifier" : "doc:\/\/PoieticCore\/documentation\/PoieticCore\/ParenthesisSyntax",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "ParenthesisSyntax"
    }
  ],
  "role" : "symbol",
  "title" : "ParenthesisSyntax",
  "type" : "topic",
  "url" : "\/documentation\/poieticcore\/parenthesissyntax"
},
"doc://PoieticCore/documentation/PoieticCore/Runtime": {
  "abstract" : [
    {
      "text" : "Types and functionality for a runtime system.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/PoieticCore\/documentation\/PoieticCore\/Runtime",
  "kind" : "article",
  "role" : "collectionGroup",
  "title" : "Runtime",
  "type" : "topic",
  "url" : "\/documentation\/poieticcore\/runtime"
},
"doc://PoieticCore/documentation/PoieticCore/Scanner": {
  "abstract" : [
    {
      "text" : "Base object for simple lexers.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "Scanner"
    }
  ],
  "identifier" : "doc:\/\/PoieticCore\/documentation\/PoieticCore\/Scanner",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "Scanner"
    }
  ],
  "role" : "symbol",
  "title" : "Scanner",
  "type" : "topic",
  "url" : "\/documentation\/poieticcore\/scanner"
},
"doc://PoieticCore/documentation/PoieticCore/ScannerError": {
  "abstract" : [

  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "enum"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "ScannerError"
    }
  ],
  "identifier" : "doc:\/\/PoieticCore\/documentation\/PoieticCore\/ScannerError",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "ScannerError"
    }
  ],
  "role" : "symbol",
  "title" : "ScannerError",
  "type" : "topic",
  "url" : "\/documentation\/poieticcore\/scannererror"
},
"doc://PoieticCore/documentation/PoieticCore/Signature": {
  "abstract" : [
    {
      "text" : "Function signature.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "Signature"
    }
  ],
  "identifier" : "doc:\/\/PoieticCore\/documentation\/PoieticCore\/Signature",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "Signature"
    }
  ],
  "role" : "symbol",
  "title" : "Signature",
  "type" : "topic",
  "url" : "\/documentation\/poieticcore\/signature"
},
"doc://PoieticCore/documentation/PoieticCore/TextLocation": {
  "abstract" : [
    {
      "text" : "Human-oriented location within a text.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "TextLocation"
    }
  ],
  "identifier" : "doc:\/\/PoieticCore\/documentation\/PoieticCore\/TextLocation",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "TextLocation"
    }
  ],
  "role" : "symbol",
  "title" : "TextLocation",
  "type" : "topic",
  "url" : "\/documentation\/poieticcore\/textlocation"
},
"doc://PoieticCore/documentation/PoieticCore/Token": {
  "abstract" : [
    {
      "text" : "Token represents a lexical unit of the source.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "Token"
    }
  ],
  "identifier" : "doc:\/\/PoieticCore\/documentation\/PoieticCore\/Token",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "Token"
    }
  ],
  "role" : "symbol",
  "title" : "Token",
  "type" : "topic",
  "url" : "\/documentation\/poieticcore\/token"
},
"doc://PoieticCore/documentation/PoieticCore/TokenTypeProtocol": {
  "abstract" : [
    {
      "text" : "Protocol for token types used by the ",
      "type" : "text"
    },
    {
      "identifier" : "doc:\/\/PoieticCore\/documentation\/PoieticCore\/Lexer",
      "isActive" : true,
      "type" : "reference"
    },
    {
      "text" : ".",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "protocol"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "TokenTypeProtocol"
    }
  ],
  "identifier" : "doc:\/\/PoieticCore\/documentation\/PoieticCore\/TokenTypeProtocol",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "TokenTypeProtocol"
    }
  ],
  "role" : "symbol",
  "title" : "TokenTypeProtocol",
  "type" : "topic",
  "url" : "\/documentation\/poieticcore\/tokentypeprotocol"
},
"doc://PoieticCore/documentation/PoieticCore/UnaryOperatorSyntax": {
  "abstract" : [

  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "UnaryOperatorSyntax"
    }
  ],
  "identifier" : "doc:\/\/PoieticCore\/documentation\/PoieticCore\/UnaryOperatorSyntax",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "UnaryOperatorSyntax"
    }
  ],
  "role" : "symbol",
  "title" : "UnaryOperatorSyntax",
  "type" : "topic",
  "url" : "\/documentation\/poieticcore\/unaryoperatorsyntax"
},
"doc://PoieticCore/documentation/PoieticCore/UnboundExpression": {
  "abstract" : [
    {
      "text" : "Type alias for an expression where the variables and functions are",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "represented by a string - typically their names.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "typealias"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "UnboundExpression"
    }
  ],
  "identifier" : "doc:\/\/PoieticCore\/documentation\/PoieticCore\/UnboundExpression",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "UnboundExpression"
    }
  ],
  "role" : "symbol",
  "title" : "UnboundExpression",
  "type" : "topic",
  "url" : "\/documentation\/poieticcore\/unboundexpression"
},
"doc://PoieticCore/documentation/PoieticCore/VariableSyntax": {
  "abstract" : [

  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "VariableSyntax"
    }
  ],
  "identifier" : "doc:\/\/PoieticCore\/documentation\/PoieticCore\/VariableSyntax",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "VariableSyntax"
    }
  ],
  "role" : "symbol",
  "title" : "VariableSyntax",
  "type" : "topic",
  "url" : "\/documentation\/poieticcore\/variablesyntax"
}
}
}